// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BanubaLicenseServicingSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import BNBLicenseUtils
@_exported import BanubaLicenseServicingSDK
import BanubaUtilities
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
public enum BNBInformerEventType {
  case `init`(any BanubaLicenseServicingSDK.BasicEventOptions)
  case present(any BanubaLicenseServicingSDK.BasicEventOptions)
  case export(any BanubaLicenseServicingSDK.BasicEventOptions)
}
public protocol BasicEventOptions : Swift.Decodable, Swift.Encodable {
  var sdkVersion: Swift.String { get }
  var iOSVersion: Swift.String { get }
  func adjustStringJson() -> Swift.String?
}
extension BanubaLicenseServicingSDK.BasicEventOptions {
  public func adjustStringJson() -> Swift.String?
}
public struct VideoSources : Swift.Codable {
  public let camera: Swift.Int
  public let gallery: Swift.Int
  public let pip: Swift.Int
  public let slideshow: Swift.Int
  public let audio: Swift.Int
  public init(camera: Swift.Int, gallery: Swift.Int, pip: Swift.Int, slideshow: Swift.Int, audio: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ExportEventOptions : BanubaLicenseServicingSDK.BasicEventOptions {
  public let exportSuccess: Swift.Bool
  public let videoResolutions: [Swift.String]
  public let postProcessingEffects: BanubaLicenseServicingSDK.PostProcessingOptions?
  public let cameraEffects: [Swift.String]?
  public let sdkVersion: Swift.String
  public let iOSVersion: Swift.String
  public let exportDuration: Swift.Double
  public let videoDuration: Swift.Double
  public let videoCount: Swift.UInt8
  public let videoSources: BanubaLicenseServicingSDK.VideoSources
  public let aspectRatio: Swift.String
  public init(exportSuccess: Swift.Bool, videoResolutions: [Swift.String], postProcessingEffects: BanubaLicenseServicingSDK.PostProcessingOptions?, cameraEffects: [Swift.String]?, exportDuration: Foundation.TimeInterval, videoDuration: Foundation.TimeInterval, videoCount: Swift.UInt8, videoSources: BanubaLicenseServicingSDK.VideoSources, aspectRatio: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PostProcessingOptions : Swift.Codable {
  public init(visual: Swift.Int, speed: Swift.Int, mask: Swift.Int, color: Swift.Int, text: Swift.Int, sticker: Swift.Int, blur: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct InitEventOptions : BanubaLicenseServicingSDK.BasicEventOptions {
  public var sdkVersion: Swift.String
  public var iOSVersion: Swift.String
  public init()
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias BanubaVideoEditorEntryPoint = BanubaLicenseServicingSDK.PresentEventOptions.EntryPoint
public struct PresentEventOptions : BanubaLicenseServicingSDK.BasicEventOptions {
  public var sdkVersion: Swift.String
  public var iOSVersion: Swift.String
  public enum EntryPoint : Swift.String, Swift.Codable {
    case camera
    case pip
    case trimmer
    case editor
    case drafts
    case gallery
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public init(entryPoint: BanubaLicenseServicingSDK.PresentEventOptions.EntryPoint)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum EffectType : Swift.String, Swift.CaseIterable {
  case mask
  case filter
  case speed
  case beautification
  case timer
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BanubaLicenseServicingSDK.EffectType]
  public typealias RawValue = Swift.String
  public static var allCases: [BanubaLicenseServicingSDK.EffectType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc(BNBAnalyticsManager) public class BNBAnalyticsManager : ObjectiveC.NSObject {
  public var license: BanubaLicenseServicingSDK.License {
    get
  }
  public var cameraEffects: [BanubaLicenseServicingSDK.EffectType : [Swift.String?]]
  public init(license: BanubaLicenseServicingSDK.License)
  @objc deinit
}
extension BanubaLicenseServicingSDK.BNBAnalyticsManager {
  public func sendEvent(withType type: BanubaLicenseServicingSDK.BNBInformerEventType)
}
@_hasMissingDesignatedInitializers @objc public class License : ObjectiveC.NSObject {
  @objc public var token: Swift.String {
    get
  }
  @objc public var clientId: Swift.String {
    get
  }
  @objc public var maxFaces: Swift.Int32 {
    get
  }
  @objc public var collectAnalytics: Swift.Bool {
    get
  }
  @objc public var supportsAnalytics: Swift.Bool {
    get
  }
  @objc public var supportsFaceAR: Swift.Bool {
    get
  }
  @objc public var supportsPiP: Swift.Bool {
    get
  }
  @objc public var supportsMusicLibrary: Swift.Bool {
    get
  }
  @objc public var supportsSoundstripe: Swift.Bool {
    get
  }
  @objc public var supportsBgSeparation: Swift.Bool {
    get
  }
  @objc public var supportsCaptions: Swift.Bool {
    get
  }
  @objc public var supportsAutoCut: Swift.Bool {
    get
  }
  @objc public var postProcessingEffects: [Swift.Int] {
    get
  }
  @objc public var arCloudURL: Swift.String? {
    get
  }
  @objc public var timeBomb: BanubaLicenseServicingSDK.TimeBomb? {
    get
  }
  @objc public var supportsFHD: Swift.Bool {
    get
  }
  @objc public var isExportAPIEnabled: Swift.Bool {
    get
  }
  @objc public var isPlaybackAPIEnabled: Swift.Bool {
    get
  }
  @objc public var isVESDKEnabled: Swift.Bool {
    get
  }
  @objc public var isPhotoEditorSDKEnabled: Swift.Bool {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc public static func getLicense(fromToken token: Swift.String) -> BanubaLicenseServicingSDK.License?
  public func getLicenseState(completion: @escaping ((BNBLicenseUtils.XBNBLicenseStatus) -> Swift.Void))
  @objc deinit
}
@objc public class TimeBomb : ObjectiveC.NSObject, Swift.Codable {
  @objc public var yearBegin: Swift.Int, monBegin: Swift.Int, dayBegin: Swift.Int, yearEnd: Swift.Int
  @objc public var monEnd: Swift.Int, dayEnd: Swift.Int
  @objc public var isExpired: Swift.Bool {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension BanubaLicenseServicingSDK.PresentEventOptions.EntryPoint : Swift.Equatable {}
extension BanubaLicenseServicingSDK.PresentEventOptions.EntryPoint : Swift.Hashable {}
extension BanubaLicenseServicingSDK.PresentEventOptions.EntryPoint : Swift.RawRepresentable {}
extension BanubaLicenseServicingSDK.EffectType : Swift.Equatable {}
extension BanubaLicenseServicingSDK.EffectType : Swift.Hashable {}
extension BanubaLicenseServicingSDK.EffectType : Swift.RawRepresentable {}
